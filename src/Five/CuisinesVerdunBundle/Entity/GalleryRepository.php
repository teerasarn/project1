<?php

namespace Five\CuisinesVerdunBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Five\CoreBundle\Repository\AbstractRepository as BaseRepo;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * GalleryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GalleryRepository extends BaseRepo
{
    protected $namespace   = 'FiveCuisinesVerdunBundle';
    protected $entity      = 'Gallery';
    protected $entityClass = 'FiveCuisinesVerdunBundle:Gallery';	

/*    public function findRealisations( $categories_id, $enabled = null )
    {
        
    }*/

    public function findByCategoryIds( $categories_id, $context = null, $enabled = null )
    {

        $ids = array();

        foreach( $categories_id as $key => $value )
        {
            if( is_numeric( $value ) && $value > 0 )
            {
                $ids[] = $value;
            }
        }


        $sql = "                
                SELECT G.*,
                I.id as 'image_id', I.src, I.src_thumb, I.title_fr as 'image_title_fr', I.title_fr as 'image_title_en', I.description_fr as 'image_description_fr', I.description_en as 'image_description_en', I.position as 'image_position'
                FROM cv_gallery__image as I
                LEFT JOIN cv_gallery as G ON G.id = I.gallery_id
                WHERE I.gallery_id IN ( SELECT G.id
                FROM cv_gallery__category as C
                LEFT JOIN cv_gallery__gallery_category as GC on GC.category_id = C.id
                LEFT JOIN cv_gallery as G on G.id = GC.gallery_id and GC.category_id = C.id
                WHERE 1=1
                ";

            if( !is_null( $enabled ) && ( $enabled === true || $enabled === false ) )
            {
                $sql .= sprintf( ' AND G.enabled=%d ', ( $enabled === true ? 1 : 0 ) );

                //$params[ ':enabled' ] = ( $enabled == true ? true : false );
            }

            if(!empty($ids) )
            {                
                    $sql .= " AND GC.category_id IN (".implode(',',$ids).") ";
            }

            if( $context != null )
            {
                $sql .= " AND G.context='$context' ";
            }
            
            $sql .= " GROUP BY G.id ";

            if( !empty($ids))
            {                
                $sql .= " HAVING COUNT(G.id) = ".count($ids)." ) ";
            }
            else
            {
                $sql .= " ) ";
            }


        $em         = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare( $sql . " ORDER BY G.position ASC, I.position ASC" );

        if(!empty($categories_id))
        {
        //$statement->bindValue('param1', implode( ',',$categories_id)); 
        //$statement->bindValue('param2', implode( ',',$categories_id));             
        }

        
        $statement->execute();
        //$result = $statement->fetchAll();
        $result = array();

        foreach($statement->fetchAll(\PDO::FETCH_ASSOC) as $row) {
            $result[] = $row;
        }        
        //var_dump($result);
        //if ($result === false) return -1;

        return $result;                
    }

    public function findAllWithCategories( $categories_id, $context = null, $forceCatPos = true, $enabled = null )
    {
        $dql = "SELECT g
                FROM {$this->entityClass} g
                LEFT JOIN g.images i WITH i.gallery = g.id
                LEFT JOIN g.categories c                
                WHERE  c.id IN (:ids) AND c MEMBER OF g.categories";
        
        $params = array();

        if( $context != null )
        {
            $dql .= " AND g.context='$context' ";
        }

        if( !is_null( $enabled ) && ( $enabled === true || $enabled === false ) )
        {
            $dql .= ' AND g.enabled=:enabled ';

            $params[ ':enabled' ] = ( $enabled === true ? true : false );
        }

        $dql .= " GROUP BY g.id, i.id ";

        if( $forceCatPos )
        {
            $dql .= " ORDER BY c.position ASC, g.position ASC ";
        }
        else
        {
            $dql .= " ORDER BY g.position ASC ";    
        }
        
        $params[ ':ids' ] = $categories_id;

        $query = $this->em()->createQuery( $dql )->setParameters( $params );
        //( ':ids', $categories_id );

        return $query->getResult();

/*        $rsm = new ResultSetMapping();
        // build rsm here

        $sql = "SELECT G.*
                FROM cv_gallery as G
                LEFT JOIN cv_gallery__gallery_category as GC
                ON GC.gallery_id = G.id
                AND GC.category_id IN (?)
                LEFT JOIN cv_gallery__category as C
                ON GC.category_id = C.id                
                LEFT JOIN cv_gallery__image as I
                ON I.gallery_id = G.id
                WHERE GC.category_id IN (?)
                ORDER BY C.position ASC, G.position ASC, I.position ASC";

        $query = $this->em()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $categories_id)->setParameter(2, $categories_id);

        return $query->getResult();     */   
    }



}