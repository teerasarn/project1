<?php

namespace Five\CuisinesVerdunBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Five\CoreBundle\Repository\AbstractRepository as BaseRepo;
use Doctrine\ORM\QueryBuilder;

/**
 * GalleryImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */


class GalleryImageRepository extends BaseRepo
{
    protected $namespace   = 'FiveCuisinesVerdunBundle';
    protected $entity      = 'GalleryImage';
    protected $entityClass = 'FiveCuisinesVerdunBundle:GalleryImage';
	public function findImagesByCategories2( array $categories = array(), $context = 'realisation' )
	{

		$params     = array();
		$catsSql    = $this->_parseCategories( $categories, $context );
		$contextSql = " ( IC.context='' OR IC.context IS NULL OR CI.context IS NOT NULL ) ";
		$contextSql = " 1=1 ";
		
		if( in_array( $context, array( 'realisation', 'kitchen', 'bathroom' ) ) )
		{
			$contextSql = " IC.context='$context' ";
		}

		$sql = "SELECT
		I.* FROM cv_gallery__category as C
		LEFT JOIN cv_gallery__realisation as IC ON IC.gallery_category_id = C.ID AND $contextSql AND $catsSql
		LEFT JOIN cv_gallery__image as I ON IC.gallery_image_id = I.id
		WHERE I.id is not null
		GROUP BY I.id
		ORDER BY IC.position DESC";

        $em         = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare( $sql );
        
        $statement->execute();
        $result = $statement->fetchAll();
        if ($result === false) return -1;

        return $result;
        
	}


	private function _getDistinctCategories( $context = null )
	{

		$sql = "SELECT 
				DISTINCT parent, 
				GROUP_CONCAT( `name` ORDER BY position ASC ) as categories 
				FROM cv_gallery__category
				WHERE context='realisation'
				GROUP BY parent 
				ORDER BY position";

        $em         = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement  = $connection->prepare( $sql );
        
        $statement->execute();
        $result = $statement->fetchAll();
        if ($result === false) return -1;

        return $result[0];		
	}

	private function _parseCategories( array $categories = array(), $context = null )
	{
		$sql     = " C.name IS NOT NULL ";
		$numeric = "";
		$named   = "";
		$namedList = array();
		//$catsStr = $cat;
		$masterCategories = $this->_getDistinctCategories( $context );

		$parents   = array_keys( $masterCategories );
		$namesTmp  = array_values( $masterCategories );
		$names     = array();

		foreach( $namesTmp as $row )
		{
			$names = array_merge( $names, explode( ',', $row ) );
		}

		$names[]   = '';
		$parents[] = '';

		if( count( $categories ) > 0 )
		{
			foreach ($categories as $key => $value)
			{				
					//&& ( in_array( $key, $parents ) || in_array( $value, $names ) )
				if( ( $key != '' || $value != '' )  )
				{
					if( $key != '' && $value != '' )
					{

						$namedList[] = " ( C.name='$value' AND C.parent='$key' ) ";
					}
					else
					if( $key != '' )
					{
						$namedList[] = " ( C.parent='$key' ) ";
					}
					else
					if( $value != '' )
					{
						$namedList[] = " ( C.name='$value' ) ";
					}					
				}

			}


			if( count( $namedList ) > 0 )
			{
				$named = " (" . implode( ' OR ', $namedList ) . " ) ";
				$sql = $named;
			}

		}

		return $sql;		
	}

	/*private function _whereIn( $list )
	{
		$cnt = 0;
		$cat = " IN ( :ids ) ";
		$catsStr = " IN ( ";
		foreach ($list as $value) {
			if( $cnt == 0 )
			{
				$catsStr .= "'$value'";	
			}
			else
			{
				$catsStr .= ",'$value'";	
			} 

			$cnt++;
		}
		//$params[ 'cats' ] = $catsStr;

		$catsStr .= " ) ";	

		return ( $cnt > 0 ? $catsStr : '' );	
	}*/

	public function findImagesByCategories( array $categories = array(), $context = 'realisation', $parent = '*' )
	{

		$params     = array();
		$catsSql    = $this->parseCategories( $categories, $context );
		//$contextSql = " ( IC.context='' OR IC.context IS NULL OR CI.context IS NOT NULL ) ";
		$contextSql = " 1=1 ";
		//$parentSql = " 1=1 ";
		
		if( in_array( $context, array( 'realisation', 'kitchen', 'bathroom' ) ) )
		{
			$contextSql = " C.context='$context' ";
		}

		if( is_null( $parent ) )
		{
			$parentSql = " C.parent IS NULL ";
		}
		// else
		// if( !in_array( $parent, array( null, '', '*', false ) ) )
		// {
		// 	$parentSql = " C.parent='$parent' ";
		// }		

		$sql = "SELECT
		I.* FROM cv_gallery__category as C
		LEFT JOIN cv_gallery__realisation as IC ON IC.gallery_category_id = C.ID AND $contextSql AND $catsSql
		LEFT JOIN cv_gallery__image as I ON IC.gallery_image_id = I.id
		WHERE I.id is not null
		GROUP BY I.id
		ORDER BY I.position ASC, IC.position ASC";

        $em         = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement  = $connection->prepare( $sql );
        
        $statement->execute();
        $result = $statement->fetchAll();
        if ($result === false) return -1;

        return $result;
        
	}

	// public function setImagesToGallery()
	// {
	// 	$sql = ""
	// }

	public function getDistinctCategories( $context = null )
	{

		$sql = "SELECT 
				DISTINCT parent, 
				GROUP_CONCAT( `name` ORDER BY position ASC ) as categories 
				FROM cv_gallery__category 
				GROUP BY parent 
				ORDER BY position";

        $em         = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement  = $connection->prepare( $sql );
        
        $statement->execute();
        $result = $statement->fetchAll();
        if ($result === false) return -1;

        return $result;		
	}

	public function parseCategories( array $categories = array(), $context = null )
	{
		$sql     = " C.name IS NOT NULL ";
		$numeric = "";
		$named   = "";
		$namedList = array();
		//$catsStr = $cat;
		$masterCategories = $this->getDistinctCategories( $context );

		// foreach ($masterCategories as $masterCategory )
		// {
			$parents   = array_keys( $masterCategories[0] );
			$namesTmp  = array_values( $masterCategories[0] );
			$names     = array();

			foreach( $namesTmp as $row )
			{
				$names = array_merge( $names, explode( ',', $row ) );
			}
		//}


		$names[]   = '';
		$parents[] = '';

		if( count( $categories ) > 0 )
		{
			foreach ($categories as $key => $value)
			{				
					//&& ( in_array( $key, $parents ) || in_array( $value, $names ) )
				if( ( $key != '' || $value != '' )  )
				{
					if( $key != '' && $value != '' )
					{

						$namedList[] = " ( C.name='$value' AND C.parent='$key' ) ";
					}
					else
					if( $key != '' )
					{
						$namedList[] = " ( C.parent='$key' ) ";
					}
					else
					if( $value != '' )
					{
						$namedList[] = " ( C.name='$value' ) ";
					}					
				}

			}


			if( count( $namedList ) > 0 )
			{
				$named = " (" . implode( ' OR ', $namedList ) . " ) ";
				$sql = $named;
			}

		}

		return $sql;		
	}

	private function _whereIn( $list )
	{
		$cnt = 0;
		$cat = " IN ( :ids ) ";
		$catsStr = " IN ( ";
		foreach ($list as $value) {
			if( $cnt == 0 )
			{
				$catsStr .= "'$value'";	
			}
			else
			{
				$catsStr .= ",'$value'";	
			} 

			$cnt++;
		}
		//$params[ 'cats' ] = $catsStr;

		$catsStr .= " ) ";	

		return ( $cnt > 0 ? $catsStr : '' );	
	}
}