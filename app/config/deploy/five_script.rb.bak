# Author: Simon-Pierre Alepin
# Overwriting parts of Capifony

def remote_file_exists?(full_path)
  'true' ==  capture("if [ -e #{full_path} ]; then echo 'true'; fi").strip
end

def is_directory?(full_path)
  'true' ==  capture("if [ -d #{full_path} ]; then echo 'true'; fi").strip
end

namespace :five_ftp_git do
  :deleted_files
  :modified_files
  :exclude_paths

  task :sync_locally, :on_error => :continue do
    five_ftp_git.modified_paths_list
    puts "*******************************"
    puts "* Downloading files from FTP: *"
    puts "*******************************"
    modified_files.each do |file|
      file_remote = "#{current_path}/#{file.strip}"
      puts "--- #{file}"
      if deleted_files.index(file.strip) == nil
        #puts "  " + file     
        #puts "CUrrent local  " + Dir.getwd
        if !File.exists?(Dir.getwd + '/' + File.dirname(file))
          puts "Folder " + Dir.getwd + '/' + File.dirname(file) + "  doesn't exists - Creating folder..."
          puts run_locally( "mkdir -p " + Dir.getwd + '/' + File.dirname(file) )
        end        
        #puts ""
        if !is_directory?(file_remote) 
          puts "#{file_remote} is a " + is_directory?(file_remote).to_s
          download( file_remote, file.strip) 
        end
      end
    end

    puts " "
    puts " "
    puts "****************************"
    puts "* Files to DELETE Locally: *"
    puts "****************************"

    delete_cnt = 0

    deleted_files.each do |file|

      relative_dir = Dir.getwd + "/" + File.dirname(file.strip)
      remote_dir   = "#{current_path}/" + File.dirname(file)

      if File.directory?(file) and File.dirname(file) != Dir.getwd
        puts "Deleting " + Dir.getwd + "/" + file.strip
        #puts run_locally("git rm -r #{relative_dir}")
        puts "Deleted : #{relative_dir}"
        delete_cnt += 1
        #Dir.delete(File.dirname(file))      
      end

      #if (Dir.entries(File.dirname(file.strip)) - %w{ . .. }).empty?


        if !remote_file_exists?(remote_dir) and File.exists?( relative_dir )
          #puts "Remote DOES NOT Exist but local does -- deleting " + remote_dir
          #Dir.delete(relative_dir)
          #puts run_locally("git rm -r #{relative_dir}")
          puts "Deleted : #{relative_dir}"
          delete_cnt += 1
        end       

        check_parent = true
        while check_parent != false
          remote_dir   = File.expand_path("..", remote_dir)
          relative_dir = File.expand_path("..", relative_dir)
          #puts "Remote folder Parent" + File.expand_path("..",remote_dir)

          if !remote_file_exists?(remote_dir) and File.exists?( relative_dir ) and remote_dir != '/'
            puts "Remote DOES NOT Exist but local does -- deleting" + relative_dir
            #Dir.delete(relative_dir)
            #puts run_locally("rm -rf #{relative_dir}")
            #puts run_locally("git rm -r #{relative_dir}")
            puts "Deleted : #{relative_dir}"
            delete_cnt += 1
          else
            #puts "Remote Parent Exists " + remote_dir
            check_parent = false
          end
        end

      #end

      if File.file?(file.strip)
        #File.delete(file.strip)
        delete_cnt += 1
        if (Dir.entries(File.dirname(file.strip)) - %w{ . .. }).empty?
          puts "Empty dir " + File.dirname(file.strip)
        end
      end      
    end

    puts " "
    puts "Deleted #{delete_cnt} files & folders locally"
    puts " "

    puts " "
    puts "** Your local files have been synched with remote FTP **"
    puts "    To update your git repo, run: cap dev five_ftp_git:update_git"
    puts "    This will also commit any local changes"
    puts " "

  end

  task :update_git, :on_error => :continue do
    puts "*********************"
    puts "* Updating git repo *"
    puts "*********************"    
    agreement = Capistrano::CLI.ui.ask( "This will add/commit/push all changes done locally. Do you wish to continue? [Y/n] :")
    if agreement.strip == 'Y' or agreement.strip == 'y'
      puts run_locally("git add -u .")
      puts run_locally("git commit -m \"#### five_ftp_git - Auto FTP sync & commit ####\"")
      puts run_locally("git push")
      puts " "
    else
      puts "* Abording....Updating git repo *"
      puts " "
    end
  end

  task :show_diff, :on_error => :continue do
    five_ftp_git.modified_paths_list
    puts "*******************************"
    puts "* Files to download from FTP: *"
    puts "*******************************"
    modified_files.each do |file|
      if deleted_files.index(file.strip) == nil
        puts "  " + file      
      end
    end

    puts " "
    puts " "
    puts "****************************"
    puts "* Files to DELETE Locally: *"
    puts "****************************"
    deleted_files.each do |file|
      puts "  " + file
    end
    puts " "

  end

  task :diff_list, :on_error => :continue do
    puts five_ftp_git.build_exclude_paths
  end

  task :deleted_paths_list do
    cmd           = "git ls-files -d"
    deleted_files = capture( "cd #{current_path} && #{cmd}" )
    set :deleted_files, deleted_files.split( /\r?\n/ )
  end

  task :modified_paths_list do

    cmd      = "git ls-files -m -o --exclude-from=.gitignore --exclude-per-directory=.gitignore"
    five_ftp_git.build_exclude_paths

    if exclude_paths
      cmd += exclude_paths
    end

    five_ftp_git.deleted_paths_list
    modified_files = capture("cd #{current_path} && #{cmd}")

    if !modified_files.nil? and !modified_files.empty?

      modified_files.each do |file|

        if file.strip.length != 0 and !file.nil? and !file.empty?
          path = "#{current_path}/#{file.strip}"
          if deleted_files.include?(file)                       
            index = modified_files.index(file)
            modified_files.delete_at(index)
          end

          if ftp_git_exclude_paths.include?(file)           
            index2 = modified_files.index(file)
            modified_files.delete_at(index2)
          end

        end

      end

    end
    set :modified_files, modified_files
  end  

  task :build_exclude_paths do
    if ftp_git_exclude_paths
      set :exclude_paths, ''
      ftp_git_exclude_paths.each do |path|
        if path
          set :exclude_paths, exclude_paths + " --exclude=" + path
        end
      end
      #puts paths
    else
      #puts " "
    end
  end
end

namespace :permission do
  desc "Reset Permission"
  task :ubuntu do
    
    capifony_pretty_print "---> Reset Permission (ubuntu:symfony) - FIVE"

    # Set general permission
    # On all releases : this fix permission problem on deploy:cleanup
    run "sudo chown -R #{user}:#{group} #{releases_path}/"

    # Set permission on latest release
    run "sudo find #{latest_release}/ -type f -exec chmod 644 '{}' \\; && find #{latest_release}/ -type d -exec chmod 755 '{}' \\;"

    writable_folders.each do |folder|
      run "sudo chmod -R g+w #{latest_release}/#{folder}"
      run "sudo chmod u+s,g+s #{latest_release}/#{folder}"
      run "sudo find #{latest_release}/#{folder} -type d -exec chmod u+s,g+s '{}' \\;"
    end
    
    
    capifony_puts_ok
  end
end

namespace :composer do
  task :copy_vendors, :except => { :no_release => true } do
    capifony_pretty_print "--> Copy vendor file from previous release - Five Top code"
    run "vendorDir=#{current_path}/#{symfony_basedir}vendor; if [ -d $vendorDir ] || [ -h $vendorDir ]; then cp -a $vendorDir #{latest_release}/#{symfony_basedir}vendor; fi;"
    #run "vendorDir=#{current_path}/vendor; if [ -d $vendorDir ] || [ -h $vendorDir ]; then cp -a $vendorDir #{latest_release}/vendor; fi;"
    capifony_puts_ok
  end
end

task :upload_parameters do
  origin_file = parameters_file if parameters_file
  if origin_file && File.exists?(origin_file)
    ext = File.extname(parameters_file)
    relative_path = "app/config/parameters" + ext

    if shared_files && shared_files.include?(relative_path)
      destination_file = shared_path + "/" + relative_path
    else
      destination_file = latest_release + "/" + relative_path
    end
    try_sudo "mkdir -p #{File.dirname(destination_file)}"

    top.upload(origin_file, destination_file)
  end
end

task :upload_htaccess do
  origin_file = htaccess_file if htaccess_file
  if origin_file && File.exists?(origin_file)
    ext = File.extname(parameters_file)
    relative_path = "web/.htaccess"

    if shared_files && shared_files.include?(relative_path)
      destination_file = shared_path + "/" + relative_path
    else
      destination_file = latest_release + "/" + relative_path
    end
    try_sudo "mkdir -p #{File.dirname(destination_file)}"

    top.upload(origin_file, destination_file)
  end
end

task :upload_config do
  origin_file = config_file if config_file
  if origin_file && File.exists?(origin_file)
    ext = File.extname(parameters_file)
    relative_path = origin_file

    if shared_files && shared_files.include?(relative_path)
      destination_file = shared_path + "/" + relative_path
    else
      destination_file = latest_release + "/" + relative_path
    end
    try_sudo "mkdir -p #{File.dirname(destination_file)}"

    try_sudo top.upload(origin_file, destination_file)
  end
end

task :fix_centos_permission, :on_error => :continue do
  try_sudo "chmod 755 #{deploy_to}"
  try_sudo "chmod 755 #{deploy_to}shared"
  try_sudo "chmod 755 #{latest_release}/web"
  try_sudo "chmod 644 #{latest_release}/web/app_dev.php"
  try_sudo "chmod 644 #{latest_release}/web/app.php"
  try_sudo "chmod 755 #{deploy_to}current"
  try_sudo "chmod 755 #{deploy_to}releases"
  try_sudo "chmod 755 #{latest_release}"  
end

task :update_db_schema do
  try_sudo "php #{latest_release}/#{symfony_basedir.chop}app/console doctrine:schema:update --force"
end

namespace :symfony do
  desc "Runs custom symfony command - FIVE"
  task :default, :roles => :app, :except => { :no_release => true }, :on_error => :continue do
    prompt_with_default(:task_arguments, "cache:clear")

    stream "cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_console} #{task_arguments} --env=#{symfony_env_prod}"
  end

  namespace :logs do
    [:tail, :tail_dev].each do |action|
      lines = ENV['lines'].nil? ? '50' : ENV['lines']
      log   = action.to_s == 'tail' ? 'prod.log' : 'dev.log'
      desc "Tail #{log}"
      task action, :roles => :app, :except => { :no_release => true } do
        run "#{try_sudo} tail -n #{lines} -f #{shared_path}/#{log_path}/#{log}" do |channel, stream, data|
          trap("INT") { puts 'Interupted'; exit 0; }
          puts
          puts "#{channel[:host]}: #{data}"
          break if stream == :err
        end
      end
    end
  end

  namespace :assets do
    desc "Updates assets version (in config.yml)"
    task :update_version, :roles => :app, :except => { :no_release => true }, :on_error => :continue do
      run "#{try_sudo} sed -i 's/\\(assets_version: \\)\\([a-zA-Z0-9_]*\\)\\(.*\\)$/\\1 \"#{real_revision[0,7]}\"\\3/g' #{latest_release}/#{app_path}/config/config.yml"
    end

    desc "Installs bundle's assets"
    task :install, :roles => :app, :except => { :no_release => true }, :on_error => :continue do
      capifony_pretty_print "---> Installing bundle's assets - FIVE"

      install_options = ''

      if true == assets_symlinks then
        install_options += " --symlink"
      end

      if true == assets_relative then
        install_options += " --relative"
      end

      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_console} assets:install web#{install_options} --env=#{symfony_env_prod}'"
      #run "#{try_sudo} chown -R #{user}:#{group} #{latest_release}/#{symfony_basedir}web" 
      #run "#{try_sudo} chmod -R 775 #{latest_release}/#{symfony_basedir}web/bundles" 
      capifony_puts_ok
    end
  end

  namespace :assetic do
    desc "Dumps all assets to the filesystem"
    task :dump, :roles => :app,  :except => { :no_release => true }, :on_error => :continue do
      capifony_pretty_print "---> Dumping all assets to the filesystem - FIVE"
      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_console} assetic:dump --env=#{symfony_env_prod} --no-debug'"
      capifony_puts_ok
    end
  end

  namespace :vendors do
    [:install, :reinstall, :upgrade].each do |action|
      desc "Runs the bin/vendors script to #{action.to_s} the vendors"
      task action, :roles => :app, :except => { :no_release => true } do
        capifony_pretty_print "---> #{action.to_s.capitalize}ing vendors - FIVE"

        cmd = action.to_s
        case action
        when :reinstall
          cmd = "install --reinstall"
        when :upgrade
          cmd = "update"
        end

        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_vendors} #{cmd}'"
        capifony_puts_ok
      end
    end
  end

  namespace :bootstrap do
    desc "Runs the bin/build_bootstrap script"
    task :build, :roles => :app, :except => { :no_release => true } do
      capifony_pretty_print "---> Building bootstrap file - FIVE"

      if !remote_file_exists?("#{latest_release}/#{symfony_basedir}#{build_bootstrap}") && true == use_composer then
        set :build_bootstrap, "vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php"
        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && test -f #{build_bootstrap} && #{php_bin} #{build_bootstrap} app || echo '#{build_bootstrap} not found, skipped''"
      else
        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && test -f #{build_bootstrap} && #{php_bin} #{build_bootstrap} || echo '#{build_bootstrap} not found, skipped''"
      end

      capifony_puts_ok
    end
  end

  namespace :composer do
    desc "Gets composer and installs it"
    task :get, :roles => :app, :except => { :no_release => true } do

      if remote_file_exists?("#{previous_release}/#{symfony_basedir}composer.phar")
        capifony_pretty_print "---> Copying Composer from previous release - FIVE"
        run "#{try_sudo} sh -c 'cp #{previous_release}/#{symfony_basedir}composer.phar #{latest_release}/#{symfony_basedir.chop}'"
        capifony_puts_ok
      end

      if !remote_file_exists?("#{latest_release}/#{symfony_basedir}composer.phar")
        capifony_pretty_print "---> Downloading Composer - FIVE"

        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && curl -s http://getcomposer.org/installer | #{php_bin}'"
      else
        capifony_pretty_print "---> Updating Composer - FIVE"

        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} composer.phar self-update'"
      end
      capifony_puts_ok
    end

    desc "Updates composer"
    task :self_update, :roles => :app, :except => { :no_release => true } do
      capifony_pretty_print "---> Updating Composer - FIVE"
      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{composer_bin} self-update'"
      capifony_puts_ok
    end

    desc "Runs composer to install vendors from composer.lock file - FIVE"
    task :install, :roles => :app, :except => { :no_release => true } do
      if composer_bin
        symfony.composer.self_update
      else
        symfony.composer.get
        set :composer_bin, "#{php_bin} composer.phar"
      end

      capifony_pretty_print "---> Installing Composer dependencies - FIVE"
      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{composer_bin} install #{composer_options}'"
      capifony_puts_ok
    end

    desc "Runs composer to update vendors, and composer.lock file - FIVE"
    task :update, :roles => :app, :except => { :no_release => true } do
      if composer_bin
        symfony.composer.self_update
      else
        symfony.composer.get
        set :composer_bin, "#{php_bin} composer.phar"
      end

      capifony_pretty_print "---> Updating Composer dependencies - FIVE"
      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{composer_bin} update #{composer_options}'"
      capifony_puts_ok
    end

    desc "Dumps an optimized autoloader"
    task :dump_autoload, :roles => :app, :except => { :no_release => true } do
      if composer_bin
        symfony.composer.self_update
      else
        symfony.composer.get
        set :composer_bin, "#{php_bin} composer.phar"
      end

      capifony_pretty_print "---> Dumping an optimized autoloader - FIVE"
      run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{composer_bin} dump-autoload --optimize'"
      capifony_puts_ok
    end

    task :copy_vendors, :except => { :no_release => true } do
      capifony_pretty_print "---> Copying vendors from previous release - FIVE"

      run "vendorDir=#{current_path}/#{symfony_basedir}vendor; if [ -d $vendorDir ] || [ -h $vendorDir ]; then cp -a $vendorDir #{latest_release}/#{symfony_basedir}vendor; fi;"
      capifony_puts_ok
    end
  end

  namespace :cache do
    [:clear, :warmup].each do |action|
      desc "Cache #{action.to_s}"
      task action, :roles => :app, :except => { :no_release => true }, :on_error => :continue do
        case action
        when :clear
          capifony_pretty_print "---> Clearing cache - FIVE"
        when :warmup
          capifony_pretty_print "---> Warming up cache - FIVE"
        end

        run "#{try_sudo} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_console} cache:#{action.to_s} --env=#{symfony_env_prod}'"
        #run "sudo -u #{group} sh -c 'cd #{latest_release}/#{symfony_basedir.chop} && #{php_bin} #{symfony_console} cache:#{action.to_s} --env=#{symfony_env_prod}'"
        
        #run "#{try_sudo} chown #{user}:#{group} #{latest_release}/#{cache_path}"
        #run "#{try_sudo} chmod -R g+w #{latest_release}/#{cache_path}"
        #run "#{try_sudo} chmod -R g+s #{latest_release}/#{cache_path}"
        #run "#{try_sudo} chgrp -R #{group} #{latest_release}/#{cache_path}"
        capifony_puts_ok
      end
    end
  end

  namespace :project do
    desc "Clears all non production environment controllers"
    task :clear_controllers do
      capifony_pretty_print "---> Clear controllers - FIVE"
      
      #command = "#{try_sudo} sh -c 'cd #{latest_release} && rm -f"
      #controllers_to_clear.each do |link|
      #  command += " #{web_path}/" + link
      #end
      #run command + "'"

      capifony_puts_ok
    end
  end
end